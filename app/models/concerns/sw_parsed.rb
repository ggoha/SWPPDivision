  def message_type(message)
    return :parse_invite if message['new_chat_member'].present?
    return :parse_undefined unless message['text']
    if from_startup_wars?(message)
      return :parse_report if message['text'].include?('–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∏—Ç–≤–µ')
      return :parse_full_profile if message['text'].include?('–î–æ —Å–ª–µ–¥—É—é—â–µ–π –ë–∏—Ç–≤—ã')
      return :parse_compact_profile if message['text'].include?('–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å')
      return :parse_endurance if message['text'].include?('üîã–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:')
    end
    return :parse_bag if message['text'].include?('#SW–û—Ç–¥–µ–ª—ã–ë–∞–≥')
    return :parse_feature if message['text'].include?('#SW–û—Ç–¥–µ–ª—ã–ò–¥–µ—è')
    :parse_undefined
  end



  def check_user(user, text)
    username = text.scan(/(üé©|ü§ñ|‚ö°Ô∏è|‚òÇÔ∏è|üìØ)(.+) \(/)[0][1]
    user && user.game_name == username
  end

  def check_profile_actual(user, message)
    user.profile_update_at && user.profile_update_at > message['forward_date']
  end 

  def get_regexp(text, regexp)
    text.scan(regexp)[0][0] if text.scan(regexp)[0]
  end

  def practice_buff(practice, user)
    (practice.to_f / user.practice - 1) * 100 / (0.6 * (1 + user.rage * 0.2))
  end

  def theory_buff(theory, user)
    (theory.to_f / user.theory - 1) * 100 / (1.6 * (1 + user.rage * 0.2))
  end

  def buff(message, user)
    return nil unless message['text'].include?('üî®')
    return nil unless user.theory && user.practice
    current_practice = to_int get_regexp(message['text'], /üî®(.+)üéì/)
    current_theory = to_int get_regexp(message['text'], /üéì(.+)üêø/)
    message['text'].include?('–¢—ã –∑–∞—â–∏—â–∞–ª') ? theory_buff(current_theory, user) : practice_buff(current_practice, user)
  end


  def endurances(text)
    text.scan(/üîã–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: (\d+)%/)[0] ? (text.scan(/üîã–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: (\d+)%/)[0][0]).to_i : 0
  end

  def parse_feature(message)
    me = Rails.application.secrets['telegram']['me']
    bot.forward_message message_id: message['message_id'], from_chat_id: message['chat']['id'], chat_id: me
    respond_with :message, text: t('.parse_feature.content')
  end

  def parse_bag(message)
    me = Rails.application.secrets['telegram']['me']
    bot.forward_message message_id: message['message_id'], from_chat_id: message['chat']['id'], chat_id: me
    respond_with :message, text: t('.parse_bag.content')
  end

  def parse_invite(message)
    return unless message['new_chat_member']['id'] == Rails.application.secrets['telegram']['bots']['division']['id']
    user = User.find_by_telegram_id(message['from']['id'])
    unless user
      respond_with :message, text: '–û—Ç–¥–µ–ª –Ω–µ —Å–æ–∑–¥–∞–Ω–Ω, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞ –≤–∞–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç—É –≤ –ª–∏—á–∫—É'
      return
    end
    Division.find_or_create(message, user)
  end

  def parse_full_profile(message)
    text = message['text']
    
    user = User.find_or_create(message)
    if check_profile_actual(user, message)
      respond_with :message, text: '–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—å' and return
    end
    params = {}
    params[:game_name] = 
    params[:practice] = get_regexp(text, /–ü—Ä–∞–∫—Ç–∏–∫–∞:.+\((\d+)\)/)
    params[:theory] = get_regexp(text, /–¢–µ–æ—Ä–∏—è:.+\((\d+)\)/)
    params[:cunning] = get_regexp(text, /–•–∏—Ç—Ä–æ—Å—Ç—å:.+\((\d+)\)/)
    params[:wisdom] = get_regexp(text, /–ú—É–¥—Ä–æ—Å—Ç—å:.+\((\d+)\)/)
    params[:stars] = (get_regexp(text, /–ö—Ä—É—Ç–∏–∑–Ω–∞: (.+)\/cool/).length - 1) / 2
    params[:level] = get_regexp(text, /–£—Ä–æ–≤–µ–Ω—å: (\d+)/)
    params[:experience] = to_int(get_regexp(text, /–û–ø—ã—Ç: (.+) –∏–∑/))
    params[:motivation] = motivations(message)
    user.update_profile(params)

    endurance = get_regexp(text, /–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: (\d+)%/)
    user.update_endurance(endurance)
    respond_with :message, text: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
  end

  def parse_compact_profile(message)
    text = message['text']
    
    user = User.find_or_create(message)
    if check_profile_actual(user, message)
      respond_with :message, text: '–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—å' and return
    end
    params = {}
    params[:game_name] = get_regexp(text, /\n\nüí∞?(.*) \(/)
    params[:practice] = to_int get_regexp(text, /üî®(.+)üéì/)
    params[:theory] = to_int get_regexp(text, /üéì(.+)/)
    params[:cunning] = to_int get_regexp(text, /üêø(.+)üê¢/)
    params[:wisdom] = to_int get_regexp(text, /üê¢(.+)/)
    params[:stars] = (get_regexp(text, /(.+)\/cool/).length - 1) / 2
    params[:level] = get_regexp(text, /üéö(\d+) \(/)
    params[:experience] = to_int get_regexp(text, /\((.+) –∏–∑/)
    params[:motivation] = to_int get_regexp(text, /–∏–∑ (\d+) \(/)
    user.update_profile(params)

    endurance = get_regexp(tetx, /üîã(\d+)%/)
    user.update_endurance(endurance)
    respond_with :message, text: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
  end

  def parse_report(message)
    text = message['text']
    user = User.find_or_create(message)
    if !check_user    
      respond_with :message, text: '–†–µ–ø–æ—Ä—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç' and return
    end
    if text.scan(/(–¢—ã –∑–∞—â–∏—â–∞–ª|–¢—ã –≤–∑–ª–∞–º—ã–≤–∞–ª) (.+)/).empty?
      respond_with :message, text: '–†–µ–ø–æ—Ä—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤–ª–∞–º—ã–≤–∞–ª' and return
    end
    battle_result = user.company.battle_results.last
    if battle_result.battle.at.hour.to_s != get_regexp(text, /–Ω–∞ (\d+) —á–∞—Å–æ–≤/)
      respond_with :message, text: '–†–µ–ø–æ—Ä—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –±–∏—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' and return
    end
    broked_company_id = NAME_SMILE[text.scan(/(–¢—ã –∑–∞—â–∏—â–∞–ª|–¢—ã –≤–∑–ª–∞–º—ã–≤–∞–ª) (.+)/)[0][1]]
    kill = COUNT[text.scan(/(–¢–µ–±–µ –Ω–µ —É–¥–∞–ª–æ—Å—å|–¢—ã –≤—ã–Ω–µ—Å|–¢—ã –≤—ã–ø–∏–ª–∏–ª —Å—Ä–∞–∑—É|–¢–µ–±–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±–∏—Ç—å —Å—Ä–∞–∑—É|–¢—ã —É—Ä–æ–Ω–∏–ª –∞–∂) ([–∞-—è—ë]+)/)[0][1]]
    money = text.scan(/–î–µ–Ω—å–≥–∏: (.+)\n/)[0] ? text.scan(/–î–µ–Ω—å–≥–∏: (.+)\n/)[0][0].delete('$').to_i : 0 
    score = text.scan(/–¢–≤–æ–π –≤–∫–ª–∞–¥: (.+)\n/)[0] ? text.scan(/–¢–≤–æ–π –≤–∫–ª–∞–¥: (.+)\n/)[0][0].to_i : 0
    endurance = endurances(message)
    buff = buff(message, user)
    user.reports.create(battle_result: battle_result, broked_company_id: broked_company_id, kill: kill, money: money, score: score, buff: buff)
    user.update_endurance(endurance)
    respond_with :message, text: '–†–µ–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
  end

  def parse_endurance(message)
    user = User.find_or_create(message)
    endurance = get_regexp(message['text'], /üîã–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: (\d+)%/)
    user.update_endurance(endurance)
    respond_with :message, text: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –µ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'
  end
